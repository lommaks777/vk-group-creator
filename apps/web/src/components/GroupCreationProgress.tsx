'use client';

import { useState, useEffect } from 'react';
import { CheckCircle, Clock, AlertCircle, ExternalLink } from 'lucide-react';
import { GroupStatus, StudentData } from '@/types';
import { apiClient } from '@/lib/api';

interface GroupCreationProgressProps {
  jobId: string;
  studentData: StudentData | null;
  onComplete: (result: any) => void;
  onError: () => void;
}

const PROGRESS_STEPS = [
  { key: 'group_created', label: '–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã', icon: 'üè¢' },
  { key: 'avatar_uploaded', label: '–ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞', icon: 'üñºÔ∏è' },
  { key: 'cover_uploaded', label: '–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±–ª–æ–∂–∫–∏', icon: 'üé®' },
  { key: 'posts_published', label: '–ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤', icon: 'üìù' },
  { key: 'reviews_topic_created', label: '–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–º—ã –æ—Ç–∑—ã–≤–æ–≤', icon: 'üí¨' },
  { key: 'market_enabled', label: '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä–∫–µ—Ç–∞', icon: 'üõí' },
  { key: 'services_added', label: '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥', icon: '‚öôÔ∏è' },
  { key: 'address_added', label: '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞', icon: 'üìç' },
  { key: 'auto_responder_enabled', label: '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—á–∏–∫–∞', icon: 'ü§ñ' },
];

export function GroupCreationProgress({ 
  jobId, 
  studentData, 
  onComplete, 
  onError 
}: GroupCreationProgressProps) {
  const [status, setStatus] = useState<GroupStatus | null>(null);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    const pollStatus = async () => {
      try {
        const response = await apiClient.getGroupStatus(jobId);
        setStatus(response);
        setIsLoading(false);

        if (response.status === 'completed') {
          onComplete(response.result);
        } else if (response.status === 'failed') {
          onError();
        }
      } catch (error) {
        console.error('Error polling status:', error);
        setIsLoading(false);
        onError();
      }
    };

    // –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å —Å—Ä–∞–∑—É
    pollStatus();

    // –û–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
    const interval = setInterval(pollStatus, 2000);

    return () => clearInterval(interval);
  }, [jobId, onComplete, onError]);

  if (isLoading) {
    return (
      <div className="card text-center">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-vk-600 mx-auto mb-4"></div>
        <h2 className="text-2xl font-bold text-gray-900 mb-2">
          –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç—É—Å...
        </h2>
        <p className="text-gray-600">
          –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä—É–ø–ø—ã
        </p>
      </div>
    );
  }

  if (!status) {
    return (
      <div className="card text-center">
        <AlertCircle className="w-12 h-12 text-red-500 mx-auto mb-4" />
        <h2 className="text-2xl font-bold text-gray-900 mb-2">
          –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
        </h2>
        <p className="text-gray-600">
          –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã
        </p>
      </div>
    );
  }

  const completedSteps = Object.values(status.progress).filter(Boolean).length;
  const totalSteps = Object.keys(status.progress).length;
  const progressPercentage = (completedSteps / totalSteps) * 100;

  const getStepStatus = (stepKey: string) => {
    if (status.progress[stepKey as keyof typeof status.progress]) {
      return 'completed';
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ—Ç —à–∞–≥ —Ç–µ–∫—É—â–∏–º
    const stepIndex = PROGRESS_STEPS.findIndex(step => step.key === stepKey);
    const completedStepIndex = PROGRESS_STEPS.findIndex(step => 
      status.progress[step.key as keyof typeof status.progress]
    );
    
    if (stepIndex === completedStepIndex + 1) {
      return 'current';
    }
    
    return 'pending';
  };

  return (
    <div className="card">
      <div className="text-center mb-8">
        <div className="w-16 h-16 bg-vk-600 rounded-full mx-auto mb-4 flex items-center justify-center">
          <Clock className="w-8 h-8 text-white" />
        </div>
        <h2 className="text-2xl font-bold text-gray-900 mb-2">
          –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ
        </h2>
        <p className="text-gray-600">
          –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –≠—Ç–æ –∑–∞–π–º–µ—Ç –æ–∫–æ–ª–æ 30-60 —Å–µ–∫—É–Ω–¥.
        </p>
      </div>

      {/* Progress Bar */}
      <div className="mb-8">
        <div className="flex justify-between text-sm text-gray-600 mb-2">
          <span>–ü—Ä–æ–≥—Ä–µ—Å—Å</span>
          <span>{Math.round(progressPercentage)}%</span>
        </div>
        <div className="progress-bar">
          <div 
            className="progress-fill"
            style={{ width: `${progressPercentage}%` }}
          />
        </div>
      </div>

      {/* Steps */}
      <div className="space-y-4">
        {PROGRESS_STEPS.map((step, index) => {
          const stepStatus = getStepStatus(step.key);
          
          return (
            <div key={step.key} className="flex items-center space-x-4">
              <div className={`flex-shrink-0 w-8 h-8 rounded-full flex items-center justify-center ${
                stepStatus === 'completed' 
                  ? 'bg-green-500 text-white' 
                  : stepStatus === 'current'
                  ? 'bg-vk-600 text-white'
                  : 'bg-gray-200 text-gray-500'
              }`}>
                {stepStatus === 'completed' ? (
                  <CheckCircle className="w-5 h-5" />
                ) : stepStatus === 'current' ? (
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                ) : (
                  <span className="text-sm font-semibold">{index + 1}</span>
                )}
              </div>
              
              <div className="flex-1">
                <div className="flex items-center space-x-2">
                  <span className="text-lg">{step.icon}</span>
                  <span className={`font-medium ${
                    stepStatus === 'completed' 
                      ? 'text-green-600' 
                      : stepStatus === 'current'
                      ? 'text-vk-600'
                      : 'text-gray-500'
                  }`}>
                    {step.label}
                  </span>
                </div>
                
                {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —à–∞–≥–æ–≤ */}
                {step.key === 'posts_published' && status.progress.posts_published > 0 && (
                  <p className="text-sm text-gray-500 mt-1">
                    –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ {status.progress.posts_published} –∏–∑ {status.progress.total_posts} –ø–æ—Å—Ç–æ–≤
                  </p>
                )}
                
                {step.key === 'services_added' && status.progress.services_added > 0 && (
                  <p className="text-sm text-gray-500 mt-1">
                    –î–æ–±–∞–≤–ª–µ–Ω–æ {status.progress.services_added} –∏–∑ {status.progress.total_services} —É—Å–ª—É–≥
                  </p>
                )}
              </div>
            </div>
          );
        })}
      </div>

      {/* Error Display */}
      {status.error && (
        <div className="mt-6 p-4 bg-red-50 border border-red-200 rounded-lg">
          <div className="flex items-center">
            <AlertCircle className="w-5 h-5 text-red-500 mr-2" />
            <span className="text-red-800 font-medium">–û—à–∏–±–∫–∞:</span>
          </div>
          <p className="text-red-700 mt-1">{status.error}</p>
        </div>
      )}

      {/* Estimated Time */}
      <div className="mt-8 text-center text-sm text-gray-500">
        <Clock className="w-4 h-4 inline mr-1" />
        –û—Å—Ç–∞–ª–æ—Å—å –ø—Ä–∏–º–µ—Ä–Ω–æ {Math.max(0, 60 - Math.round(progressPercentage * 0.6))} —Å–µ–∫—É–Ω–¥
      </div>
    </div>
  );
}
